{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nones\\\\Documents\\\\GitHub\\\\ShonenScroll_FrontEnd\\\\src\\\\pages\\\\ChatPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { UserContext } from \"../UserContext\";\nimport \"./ChatPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatPage = () => {\n  _s();\n  const {\n    id: friendId\n  } = useParams();\n  const {\n    user\n  } = useContext(UserContext);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  useEffect(() => {\n    fetch(`http://localhost:5000/messages/conversation/${user.userid}/${friendId}`).then(res => res.json()).then(setMessages);\n  }, [user.userid, friendId]);\n  const sendMessage = async e => {\n    e.preventDefault();\n    const res = await fetch(\"http://localhost:5000/messages\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        senderId: user.userid,\n        receiverId: parseInt(friendId),\n        content: newMessage\n      })\n    });\n    const msg = await res.json();\n    setMessages(prev => [...prev, msg]);\n    setNewMessage(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.senderId === user.userid ? \"sent\" : \"received\"}`,\n        children: msg.content\n      }, msg.messageid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      className: \"chat-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatPage, \"9nbKrwE85tqjV/ZXo8HE7xwLbeY=\", false, function () {\n  return [useParams];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useEffect","useState","useContext","useParams","UserContext","jsxDEV","_jsxDEV","ChatPage","_s","id","friendId","user","messages","setMessages","newMessage","setNewMessage","fetch","userid","then","res","json","sendMessage","e","preventDefault","method","headers","body","JSON","stringify","senderId","receiverId","parseInt","content","msg","prev","className","children","map","messageid","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","placeholder","type","_c","$RefreshReg$"],"sources":["C:/Users/nones/Documents/GitHub/ShonenScroll_FrontEnd/src/pages/ChatPage.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { UserContext } from \"../UserContext\";\r\nimport \"./ChatPage.css\";\r\n\r\nconst ChatPage = () => {\r\n    const { id: friendId } = useParams();\r\n    const { user } = useContext(UserContext);\r\n    const [messages, setMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        fetch(`http://localhost:5000/messages/conversation/${user.userid}/${friendId}`)\r\n            .then(res => res.json())\r\n            .then(setMessages);\r\n    }, [user.userid, friendId]);\r\n\r\n    const sendMessage = async (e) => {\r\n        e.preventDefault();\r\n        const res = await fetch(\"http://localhost:5000/messages\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n                senderId: user.userid,\r\n                receiverId: parseInt(friendId),\r\n                content: newMessage\r\n            }),\r\n        });\r\n\r\n        const msg = await res.json();\r\n        setMessages(prev => [...prev, msg]);\r\n        setNewMessage(\"\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"chat-messages\">\r\n                {messages.map(msg => (\r\n                    <div key={msg.messageid} className={`chat-message ${msg.senderId === user.userid ? \"sent\" : \"received\"}`}>\r\n                        {msg.content}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <form onSubmit={sendMessage} className=\"chat-form\">\r\n                <input\r\n                    value={newMessage}\r\n                    onChange={(e) => setNewMessage(e.target.value)}\r\n                    placeholder=\"Type your message...\"\r\n                />\r\n                <button type=\"submit\">Send</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}